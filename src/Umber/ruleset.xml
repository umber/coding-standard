<?xml version="1.0"?>
<ruleset name="Umber">
  <description>The Umber coding standard.</description>

  <rule ref="PSR2">
    <exclude name="Generic.Files.LineLength.TooLong" />
    <exclude name="SlevomatCodingStandard.Namespaces.AlphabeticallySortedUses.IncorrectlyOrderedUses" />
    <exclude name="SlevomatCodingStandard.TypeHints.TypeHintDeclaration.MissingPropertyTypeHint" />

    <!-- Clashes with the Slevomat version causing double comma's -->
    <exclude name="Squiz.Arrays.ArrayDeclaration.NoComma" />
  </rule>

  <!--
    This standard now reads from doctrine as a base.
    They can keep the standards up-to-date more than me so its easier to work from theirs.
  -->
  <rule ref="Doctrine">
    <!--
      This is a hard one, I agree that this is not required in all cases.
      However constants can now have array values an this is a case where @var would be required.
    -->
    <exclude name="SlevomatCodingStandard.TypeHints.UselessConstantTypeHint.UselessVarAnnotation" />
    <exclude name="SlevomatCodingStandard.TypeHints.TypeHintDeclaration.MissingPropertyTypeHint" />

    <!--
      These break code more than often.
      For example methods that extend or implement that do not have return hints are given them.
      This breaks the compatibility between them and will cause a syntax issue.
    -->
    <exclude name="SlevomatCodingStandard.TypeHints.TypeHintDeclaration.MissingParameterTypeHint" />
    <exclude name="SlevomatCodingStandard.TypeHints.TypeHintDeclaration.MissingReturnTypeHint" />

    <!-- Realistically line length is not an issue -->
    <exclude name="Generic.Files.LineLength.TooLong" />

    <!--
      Lots of people are against this, however it makes it difficult to name when both are in the same namespace.
      For this reason I am a fan of these 'fixes and thus this is an optional rule.
    -->
    <exclude name="SlevomatCodingStandard.Classes.SuperfluousAbstractClassNaming.SuperfluousPrefix" />
    <exclude name="SlevomatCodingStandard.Classes.SuperfluousInterfaceNaming.SuperfluousSuffix" />
    <exclude name="SlevomatCodingStandard.Classes.SuperfluousExceptionNaming.SuperfluousSuffix" />

    <!-- Aligning the use statements is ugly to me, disabled by default for this reason -->
    <exclude name="Generic.Formatting.MultipleStatementAlignment.NotSame" />

    <!-- In most cases the order of uses and annotations is important, but grouping is nice right? -->
    <exclude name="SlevomatCodingStandard.Commenting.DocCommentSpacing.IncorrectAnnotationsGroup" />
    <exclude name="SlevomatCodingStandard.Namespaces.AlphabeticallySortedUses.IncorrectlyOrderedUses" />
    <exclude name="SlevomatCodingStandard.Namespaces.UseSpacing.IncorrectLinesCountBetweenSameTypeOfUse" />
    <exclude name="SlevomatCodingStandard.Classes.TraitUseSpacing.IncorrectLinesCountBetweenUses" />

    <!--
      Global importing is something I am growing on.
      But this can be enabled again, removed by default.
    -->
    <exclude name="SlevomatCodingStandard.Namespaces.ReferenceUsedNamesOnly.ReferenceViaFallbackGlobalName" />

    <!-- Come on, aligning documentation -->
    <exclude name="Squiz.Commenting.FunctionComment.SpacingAfterParamType" />

    <!-- Array syntax can be however you want, one-liners are almost always bad -->
    <exclude name="Squiz.Arrays.ArrayDeclaration.MultiLineNotAllowed" />

    <!-- Useless variables are better than pointless comments -->
    <exclude name="SlevomatCodingStandard.Variables.UselessVariable.UselessVariable" />
  </rule>

  <!--
    Return type colon should sit along side the parenthesis.
    Someone can fight me over this, but too many spaces.
  -->
  <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHintSpacing">
    <properties>
      <property name="spacesCountBeforeColon" value="0" />
    </properties>
  </rule>

  <!-- The exclamation mark should sit next to its target -->
  <rule ref="Generic.Formatting.SpaceAfterNot">
    <properties>
      <property name="spacing" value="0" />
    </properties>
  </rule>

  <!--
    I need to figure out how to merge here.
    These are altered from Doctrine with a few Symfony annotations thrown in.
    Grouping also adds test annotations.
  -->

  <rule ref="SlevomatCodingStandard.Commenting.DocCommentSpacing">
    <properties>
      <property name="annotationsGroups" type="array">
        <element value="@Route\" />
        <element value="@internal, @deprecated"/>
        <element value="@test, @depends, @dataProvider"/>
        <element value="@ORM\"/>
        <element value="@link, @see, @uses"/>
        <element value="@group"/>
        <element value="@param, @var"/>
        <element value="@return"/>
        <element value="@throws"/>
        <element value="@covers, @coversNothing"/>
      </property>
    </properties>
  </rule>

  <rule ref="SlevomatCodingStandard.TypeHints.TypeHintDeclaration">
    <properties>
      <property name="usefulAnnotations" type="array">
        <element value="@covers"/>
        <element value="@coversDefaultClass"/>
        <element value="@coversNothing"/>
        <element value="@dataProvider"/>
        <element value="@depends"/>
        <element value="@deprecated"/>
        <element value="@group"/>
        <element value="@internal"/>
        <element value="@link"/>
        <element value="@ODM\"/>
        <element value="@ORM\"/>
        <element value="@Route"/>
        <element value="@requires"/>
        <element value="@see"/>
        <element value="@test"/>
        <element value="@throws"/>
        <element value="@uses"/>
      </property>
    </properties>
  </rule>
</ruleset>
